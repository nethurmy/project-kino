import telebot
from telebot import types

API_TOKEN = '7896502738:AAEyHrQGzSYKJDryUWheTkWaoAWi-AB7Xpk'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(API_TOKEN)

# –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ (–∫–æ–¥: –Ω–∞–∑–≤–∞–Ω–∏–µ)
movies = {
    '001': '–ú–æ–ª–æ–¥–æ–π —á–µ–ª–æ–≤–µ–∫',
    '002': '–°–µ—Ä–∏–∞–ª: –¢–µ–ª–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏(2022)',
}

# ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
channel1_id = -1002439321624  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ 1
channel2_id = -1002304530896  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ 2

# –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
channel1_link = "https://t.me/test_kino999"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ 1
channel2_link = "https://t.me/just_pereh"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ 2

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_name = message.from_user.first_name
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    search_button = types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search")
    inline_markup = types.InlineKeyboardMarkup().add(search_button)

    bot.send_message(
        message.chat.id,
        f"–ü—Ä–∏–≤–µ—Ç {user_name}! –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∏—Å–∫' –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞.",
        reply_markup=inline_markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "search")
def handle_search_callback(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    bot.register_next_step_handler(call.message, process_movie_code)

def process_movie_code(message):
    code = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[message.chat.id] = {'movie_code': code}
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    send_subscription_info(message)

def send_subscription_info(message):
    inline_markup = types.InlineKeyboardMarkup()
    channel1_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ö–∞–Ω–∞–ª 1", url=channel1_link)
    channel2_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ö–∞–Ω–∞–ª 2", url=channel2_link)
    check_subscription_button = types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")

    inline_markup.add(channel1_button, channel2_button, check_subscription_button)
    
    bot.send_message(
        message.chat.id,
        "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n\n",
        reply_markup=inline_markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "check_subscription")
def handle_check_subscription(call):
    user_id = call.from_user.id
    
    if is_user_subscribed(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        movie_code = user_data.get(call.message.chat.id, {}).get('movie_code')
        
        if movie_code:
            search_movie(call.message, movie_code)
        else:
            bot.send_message(call.message.chat.id, "–ö–æ–¥ —Ñ–∏–ª—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        send_subscription_info(call.message)

def search_movie(message, code):
    if code in movies:
        bot.send_message(message.chat.id, f"–§–∏–ª—å–º —Å –∫–æ–¥–æ–º {code}: {movies[code]}")
    else:
        bot.send_message(message.chat.id, "–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def is_user_subscribed(user_id):
    try:
        member1 = bot.get_chat_member(channel1_id, user_id)
        member2 = bot.get_chat_member(channel2_id, user_id)

        return (member1.status in ['member', 'administrator', 'creator'] and
                member2.status in ['member', 'administrator', 'creator'])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

if __name__ == "__main__":
    bot.polling(none_stop=True)
